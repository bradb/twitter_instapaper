#!/usr/bin/env ruby

require 'twitter'
require 'httparty'
require File.join(File.expand_path(File.dirname(__FILE__)), "..", "lib", "twitter_instapaper")

$verbose = false

def verbose(msg, level=1)
  if $verbose
    puts "* #{msg}" if level == 1
    puts "  -> #{msg}" if level == 2
  end
end

def send_links_from_fav_tweets_to_instapaper
  TwitterInstapaper::Config.load!

  seen_fav_ids = Set.new
  favourites = Twitter.favorites(TwitterInstapaper::Config.twitter_username)
  verbose("found #{favourites.size} latest favourites for user #{TwitterInstapaper::Config.twitter_username}")
  favourites.each_with_index do |f, i|
    seen_fav_ids << f.id_str
    if TwitterInstapaper::Config.last_seen_fav_ids.include?(f.id_str)
      verbose("skipping ##{i + 1} '#{f.text}', already seen")
      next
    end
    verbose("scanning #{f.text} for urls to extract")
    f.text.scan(%r{http(?:s?)://[^ ]+}).each do |url|
      verbose("found #{url}, sending to instapaper", 2)
      HTTParty.post("https://www.instapaper.com/api/add",
                    :query => { :url => url, :username => TwitterInstapaper::Config.instapaper_username,
                                :password => TwitterInstapaper::Config.instapaper_password })
    end
  end
  verbose("updating config with #{seen_fav_ids.size} latest seen ids")
  TwitterInstapaper::Config.update_last_seen_fav_ids!(seen_fav_ids)
end

def collect_config_info
  config = {}
  %w(twitter_username instapaper_username instapaper_password).each do |needed_value|
    while config[needed_value].nil? || config[needed_value] == ""
      print "#{needed_value.sub(/_/, " ").capitalize}: "
      config[needed_value] = gets.strip
    end
  end
  
  config
end

options = TwitterInstapaper::parse_cmd_line_options!

$verbose = options[:verbose]

if options[:configure]
  TwitterInstapaper::Config.save!(collect_config_info)
  puts "Configuration saved successfully."
else
  send_links_from_fav_tweets_to_instapaper
end